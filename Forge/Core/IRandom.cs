// Copyright Â© 2024 Gamesmiths Guild.

namespace Gamesmiths.Forge.Core;

/// <summary>
/// Interface for implementing a custom random provider.
/// </summary>
public interface IRandom
{
	/// <summary>
	/// Returns a non-negative random integer.
	/// </summary>
	/// <returns>An integer greater than or equal to 0, randomly generated by the implementation.</returns>
	int NextInt();

	/// <summary>
	/// Returns a non-negative random integer that is less than the specified maximum.
	/// </summary>
	/// <param name="maxValue">Exclusive max value.</param>
	/// <returns>An integer in the range [0, <paramref name="maxValue"/>), or 0 if <paramref name="maxValue"/> is less than or equal to 0.</returns>
	int NextInt(int maxValue);

	/// <summary>
	/// Returns a random integer that is within a specified range.
	/// </summary>
	/// <param name="minValue">Inclusive min value.</param>
	/// <param name="maxValue">Exclusive max value.</param>
	/// <returns>An integer in the range [<paramref name="minValue"/>, <paramref name="maxValue"/>), or <paramref name="minValue"/> if the range is invalid.</returns>
	int NextInt(int minValue, int maxValue);

	/// <summary>
	/// Returns a random floating-point number that is greater than or equal to 0.0, and less than 1.0.
	/// </summary>
	/// <returns>A single-precision floating-point value in the range [0.0, 1.0), generated randomly.</returns>
	float NextSingle();

	/// <summary>
	/// Returns a random floating-point number that is greater than or equal to 0.0, and less than 1.0.
	/// </summary>
	/// <returns>A double-precision floating-point value in the range [0.0, 1.0), generated randomly.</returns>
	double NextDouble();

	/// <summary>
	/// Returns a non-negative random integer.
	/// </summary>
	/// <returns>A 64-bit integer greater than or equal to 0, generated randomly by the implementation.</returns>
	long NextInt64();

	/// <summary>
	/// Returns a non-negative random integer that is less than the specified maximum.
	/// </summary>
	/// <param name="maxValue">Exclusive max value.</param>
	/// <returns>A 64-bit integer in the range [0, <paramref name="maxValue"/>), or 0 if <paramref name="maxValue"/> is less than or equal to 0.</returns>
	long NextInt64(long maxValue);

	/// <summary>
	/// Returns a random integer that is within a specified range.
	/// </summary>
	/// <param name="minValue">Inclusive min value.</param>
	/// <param name="maxValue">Exclusive max value.</param>
	/// <returns>A 64-bit integer in the range [<paramref name="minValue"/>, <paramref name="maxValue"/>), or <paramref name="minValue"/> if the range is invalid.</returns>
	long NextInt64(long minValue, long maxValue);

	/// <summary>
	/// Fills the elements of a specified array of bytes with random numbers.
	/// </summary>
	/// <param name="buffer">The buffer with elements to be filled.</param>
	void NextBytes(byte[] buffer);

	/// <summary>
	/// Fills the elements of a specified span of bytes with random numbers.
	/// </summary>
	/// <param name="buffer">The buffer with elements to be filled.</param>
	void NextBytes(Span<byte> buffer);
}
